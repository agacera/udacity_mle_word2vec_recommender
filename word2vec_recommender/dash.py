#AUTOGENERATED! DO NOT EDIT! File to edit: dev/04_dash.ipynb (unless otherwise specified).

__all__ = ['movies_df', 'links_df', 'movielens_to_tmdb_lookup', 'api', 'movie_id_to_index_lookup', 'knn_recommender',
           'movie_card', 'update_output_div', 'external_stylesheets', 'app', 'start_dash']

#Cell
import dash
import dash_core_components as dcc
import dash_html_components as html
from dash.dependencies import Input, Output

from functools import lru_cache
from pathlib import Path

import pandas as pd
import numpy as np
import requests

from .core import *
from .recommender import KnnRecommender
from .tmdb import load_api_key, TmdbApi, MovieData

#Cell
movies_df = pd.read_csv("./data/ml-latest-small/movies.csv")
links_df = pd.read_csv("./data/ml-latest-small/links.csv")

#Cell
movielens_to_tmdb_lookup = { int(movie_id):int(tmdb_id)  for movie_id, tmdb_id in links_df.set_index("movieId")["tmdbId"].to_dict().items() if movie_id > 0 and tmdb_id > 0 }
api = TmdbApi(api_key=load_api_key(), movielens_to_tmdb_lookup=movielens_to_tmdb_lookup)

#Cell
with open(Path("./data/out/embeddings.pkl"), "rb") as f:
    embeddings = np.load(f)
with open(Path("./data/out/words_index.pkl"), "rb") as f:
    word_indexes = np.load(f)

movie_id_to_index_lookup = {int(movie_id):idx for idx, movie_id in enumerate(word_indexes)}

knn_recommender = KnnRecommender(
    word_indexes=word_indexes,
    embeddings=embeddings)

knn_recommender.fit()

#Cell
external_stylesheets = []

app = dash.Dash(__name__,
    external_stylesheets=external_stylesheets)

app.layout = html.Div(children=[
    html.H1(children='MovieLens Recommender based on Word2Vec'),

    html.Div(children='''
        Dash: A web application framework for Python.
    '''),
    dcc.Dropdown(
        id="movie-id",
        options=movies_df[["title", "movieId"]].apply(lambda r:  {"value": r["movieId"], "label": r["title"]} ,axis=1).tolist(),
    ),
    html.Div(id="selected-movie-id", children="")
])

def movie_card(movie: MovieData, seed: bool = False) -> html.Div:
    description = f"{movie.title} (id={movie.movie_id}, tmdb_id={movie.tmdb_id})"
    return html.Div(children=[
        html.H2(description) if seed else html.H3(description),
        html.Img(src=movie.image_url)
    ])

@app.callback(
    Output(component_id='selected-movie-id', component_property='children'),
    [Input(component_id='movie-id', component_property='value')]
)
def update_output_div(movie_id) -> html.Div:
    if not movie_id:
        return html.Div(children="No movie selected")
    print(movie_id)
    movie = api.fetch_movie_data_by_movielens_id(int(movie_id))
    movie_index = movie_id_to_index_lookup.get(int(movie_id))
    movie_recs = knn_recommender.recommend_by_index(movie_index)
    movies = [ api.fetch_movie_data_by_movielens_id(rec.movie_id) for rec in movie_recs ]
    return html.Div(children=[
        movie_card(movie, seed=True),
        html.Div(children=[
            html.H2("Recommendations"),
            *[movie_card(m) for m in movies]
            ])
        ])

#Cell
def start_dash(debug: bool = True):
    app.run_server(debug=debug, port=9998)